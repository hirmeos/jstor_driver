#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import re
import sys
import json
import httplib2
import pandas as pd
import csv
from datetime import datetime
from optparse import OptionParser


URI_API_ENDP = os.environ['URI_API_ENDP']
URI_API_USER = os.environ['URI_API_USER']
URI_API_PASS = os.environ['URI_API_PASS']
AUTH_API_ENDP = os.environ['AUTH_API_ENDP']
URI_SCHEME = os.environ['URI_SCHEME']
URI_STRICT = os.environ['URI_STRICT']
WORK_TYPES = json.loads(os.getenv('WORK_TYPES'))
CACHE = {}
YEAR_REGEX = re.compile(r'([0-9]{4})-.*')
SHEET_NAME = "Open Access Books Usage"  # the relevant sheet in the report
SKIP_ROWS = [0, 1, 2, 3, 4, 6, 7]  # index of useless rows in report
ARGS = [
    {
        'val': '--views-measure',
        'dest': 'views_measure',
        'action': 'store',
        'default': None,
        'help': 'URI eg. http://metrics.operas-eu.org/jstor/chapter-views/v1'
    }, {
        'val': '--downloads-measure',
        'dest': 'downloads_measure',
        'action': 'store',
        'default': None,
        'help': 'URI eg. http://operas-eu.org/jstor/chapter-downloads/v1'
    }, {
        'val': '--add-headers',
        'dest': 'add_headers',
        'action': 'store_true',
        'default': False,
        'help': 'Whether to print report headers'
    }
]


def get_options(args):
    parser = OptionParser()
    for arg in args:
        parser.add_option(arg['val'], dest=arg['dest'],
                          action=arg['action'], help=arg['help'])
    options, rest = parser.parse_args()

    assert rest == []
    assert options.views_measure and options.downloads_measure
    return options


def compile_work_types(types):
    val = ''
    i = 1
    for t in types:
        val += 'work_type:' + t
        val += ',' if i < len(types) else ''
        i += 1
    return val


def get_token(url, email, passwd):
    h = httplib2.Http()
    credentials = {'email': email, 'password': passwd}
    headers = {'content-type': 'application/json'}
    res, content = h.request(url, 'POST', json.dumps(credentials), headers)
    try:
        assert res.status == 200
    except AssertionError:
        raise ValueError(content)
    return json.loads(content.decode('utf-8'))['data'][0]['token']


def isbn_to_id(uri):
    req = "%s?uri=%s&filter=uri_scheme:%s,%s&strict=%s" \
          % (URI_API_ENDP, uri, URI_SCHEME, TYPES, URI_STRICT)
    h = httplib2.Http()
    res, content = h.request(req, 'GET', headers={'Authorization': AUTH})
    try:
        assert res.status == 200
    except AssertionError:
        r = json.loads(content.decode('utf-8'))
        m = "%s: %s" % (r['message'], r['parameters']['uri'])
        print(m, file=sys.stderr)
        return []
    entry = json.loads(content.decode('utf-8'))['data']
    return entry


def standarise_uri(uri):
    return 'urn:isbn:%s' % (uri)


def run(views_measure, downloads_measure, add_headers):
    df = pd.read_excel(
        sys.stdin.buffer,
        sheet_name=SHEET_NAME,
        skiprows=SKIP_ROWS)
    relevant_columns = list(filter(YEAR_REGEX.search, df.columns))
    measures = {
        "Chapter views": views_measure,
        "Chapter downloads": downloads_measure
    }
    w = csv.writer(sys.stdout)
    if add_headers:
        w.writerow(('measure_id', 'timestamp', 'work_uri',
                    'country_uri', 'event_uri', 'value'))

    for index, row in df.iterrows():
        isbn = row["EISBN"]
        measure = measures[row["Metric"]]
        uri = standarise_uri(isbn)
        for identifier in isbn_to_id(uri):
            uri = identifier['URI']
            for col in relevant_columns:
                value = row[col]
                datetime_obj = datetime.strptime(col, '%Y-%b')
                timestamp = datetime_obj.strftime('%Y-%m-%d 00:00:00')
                if value:
                    to_save = [measure, timestamp, uri, '', '', value]
                    w.writerow(to_save)


API_JWTOKEN = get_token(AUTH_API_ENDP, URI_API_USER, URI_API_PASS)
AUTH = 'Bearer ' + API_JWTOKEN
TYPES = compile_work_types(WORK_TYPES)

if __name__ == '__main__':
    options = get_options(ARGS)
    run(options.views_measure, options.downloads_measure, options.add_headers)
